n_learning19 <- nrow(learning19_scaled)
ind_learning19 <- sample(n_learning19,  size = n_learning19 * 0.8)
learning19_train <- learning19_scaled[ind_learning19,]
learning19_test <- learning19_scaled[-ind_learning19,]
correct_classes <- learning19_test$deep2
correct_classes
boston_test <- dplyr::select(boston_test, -deep2)
learning19_test <- dplyr::select(learning19_test, -deep2)
lda.fit <- lda(deep2 ~ ., data = learning19_train)
```{r}
library(flipMultivariates)
library(devtools)
library(flipMultivariates)
library(devtools)
lda.fit <- lda(deep2 ~ ., data = learning19_train)
library(devtools)
library(flipmultivariates)
install_github("Displayr/flipMultivariates")
install_github(Displayr)
library(devtools)
library(flipmultivariates)
install.packages("displayr")
library(devtools)
library(flipmultivariates)
library(devtools)
library(displayr)
library(MASS)
library(dplyr)
lda.fit <- lda(deep2 ~ ., data = learning19_train)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "orange", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "orange", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(learning19_train$deep2)
plot(lda.fit, dimen = 2, col = classes, pch = classes, main = "LDA biplot of learning19 train set")
lda.pred <- predict(lda.fit, newdata = learning19_test)
pred_table <- table(correct = correct_classes, predicted = lda.pred$class)
pred_table
learning19_eu <- dist(learning19[1:3])
summary(learning19_eu)
set.seed(123)
k_max <- 5 # determine the number of clusters
twcss <- sapply(1:k_max, function(k){kmeans(learning19[1:3], k)$tot.withinss}) # calculate the total within sum of squares
qplot(x = 1:k_max, y = twcss, geom = 'line') # visualize the results
learning19_scaled3 <- scale(learning19[1:3])
learning19_km3 <-kmeans(learning19_scaled3, centers = 3)
cluster <- learning19_km3$cluster
learning19_scaled3 <- data.frame(learning19_scaled3, cluster)
lda.fit_cluster <- lda(cluster ~ ., data = learning19_scaled3)
lda.fit_cluster
learning19_scaled3 <- scale(learning19)
learning19_km3 <-kmeans(learning19_scaled3, centers = 3)
cluster <- learning19_km3$cluster
learning19_scaled3 <- data.frame(learning19_scaled3, cluster)
lda.fit_cluster <- lda(cluster ~ ., data = learning19_scaled3)
lda.fit_cluster
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "orange", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes3 <- as.numeric(learning19_scaled3$cluster)
plot(lda.fit_cluster, dimen = 2, col = classes3, pch = classes3, main = "LDA biplot using three clusters")
lda.arrows(lda.fit_cluster, myscale = 2)
learning19_scaled3 <- scale(learning19[1:9])
learning19_km3 <-kmeans(learning19_scaled3, centers = 3)
cluster <- learning19_km3$cluster
learning19_scaled3 <- data.frame(learning19_scaled3, cluster)
lda.fit_cluster <- lda(cluster ~ ., data = learning19_scaled3)
lda.fit_cluster
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "orange", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes3 <- as.numeric(learning19_scaled3$cluster)
plot(lda.fit_cluster, dimen = 2, col = classes3, pch = classes3, main = "LDA biplot using three clusters")
lda.arrows(lda.fit_cluster, myscale = 2)
model_predictors <- dplyr::select(learning19_train, -deep2)
# check the dimensions
dim(model_predictors)
dim(lda.fit$scaling)
# matrix multiplication
matrix_product <- as.matrix(model_predictors) %*% lda.fit$scaling
matrix_product <- as.data.frame(matrix_product)
plot_ly(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = boston_train$crime)
plot (x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = boston_train$crime)
plot (x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = learning19_train$deep2)
plot (x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = learning19_train$deep2)
plot (x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = learning19_train$deep2)
plot (x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = learning19$deep2)
plot (x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = learning19_train$deep)
plot (x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = learning19_train$deep2)
plot(x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = learning19_train$deep2)
install.packages("plotly")
plot_ly (x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = learning19_train$deep2)
install.packages("Rtools")
install.packages("plotly")
plot_ly (x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = learning19_train$deep2)
install.packages("plotly_4.9.2.1")
install.packages("plotly")
plot_ly (x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = learning19_train$deep2)
install.packages("plotly")
plot (x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = learning19_train$deep2)
library(plotly)
plot_ly (x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = learning19_train$deep2)
library(plotly)
plot_ly (x = unref, y = deep, z = orga, type= 'scatter3d', mode='markers', color = learning19_train$deep2)
library(plotly)
plot_ly (x = 锘縰nref, y = deep, z = orga, type= 'scatter3d', mode='markers', color = learning19_train$deep2)
library(plotly)
plot_ly (x = learning19[1], y = learning19[2], z = learning19[3], type= 'scatter3d', mode='markers', color = learning19_train$deep2)
deep2 <- cut(learning19_scaled$deep, breaks = bins, include.lowest = TRUE, labels = c("low", "med", , "high"))
deep2 <- cut(learning19_scaled$deep, breaks = bins, include.lowest = TRUE, labels = c("low", "med", "high"))
deep2 <- cut(learning19_scaled$deep, breaks = bins, include.lowest = TRUE, labels = c("low", "med_low", "med_high", "high"))
install.packages(plot3D)
install.packages("plot3D")
library(plot3D)
scatter3D(x, y, z, colvar = z, col = NULL, add = FALSE)
library(plot3D)
scatter3D(learning19[1], learning19[2], learning19[3], colvar = z, col = NULL, add = FALSE)
library(plot3D)
scatter3D(learning19[1], learning19[2], learning19[3], colvar = learning19[2], col = NULL, add = FALSE)
library(plot3D)
scatter3D(learning19[1], learning19[2], learning19[3], colvar = learning19[2], col = NULL, add = FALSE)
library(plot3D)
scatter3D(learning19[1], learning19[2], learning19[3], col = NULL, add = FALSE)
library(plot3D)
scatter3D(x = learning19[1], y = learning19[2], z = learning19[3], col = NULL, add = FALSE)
library(plot3D)
scatter3D(x = learning19$锘縰nref, y = learning19$deep, z = learning19$orga, col = NULL)
library(plot3D)
scatter3D(x = learning19$锘縰nref, y = learning19$deep, z = learning19$orga, col = NULL,
main = "learning19 data", xlab = "unref",
ylab ="deep", zlab = "orga")
library(plotly)
plot_ly (x = learning19$锘縰nref, y = learning19$deep, z = learning19$orga, type= 'scatter3d', mode='markers', color = learning19_train$deep2)
library(plotly)
plot_ly (x = learning19$锘縰nref, y = learning19$deep, z = learning19$orga, type= 'scatter3d', mode='markers', color = learning19_train$deep)
library(plotly)
plot_ly (x = learning19$锘縰nref, y = learning19$deep, z = learning19$orga, type= 'scatter3d', mode='markers', color = learning19$deep)
library(plotly)
plot_ly (x = learning19$锘縰nref, y = learning19$deep, z = learning19$orga, type= 'scatter3d', mode='markers',
main = "learning19 data", xlab = "unref",
ylab ="deep", zlab = "orga")
library(plotly)
plot_ly (x = learning19$锘縰nref, y = learning19$deep, z = learning19$orga, type= 'scatter3d', mode='markers', color = learning19$deep,
main = "learning19 data", xlab = "unref",
ylab ="deep", zlab = "orga"))
library(plotly)
plot_ly (x = learning19$锘縰nref, y = learning19$deep, z = learning19$orga, type= 'scatter3d', mode='markers', color = learning19$deep)
library(plot3D)
scatter3D(x = learning19$deep, y = learning19$锘縰nref, z = learning19$orga, col = NULL,
main = "learning19 data", xlab = "unref",
ylab ="deep", zlab = "orga")
library(plot3D)
scatter3D(x = learning19$deep, y = learning19$锘縰nref, z = learning19$orga, col = NULL,
main = "learning19 data", xlab = "deep",
ylab ="unref", zlab = "orga")
library(plotly)
plot_ly (x = learning19$锘縰nref, y = learning19$deep, z = learning19$orga, type= 'scatter3d',color = learning19$deep)
library(plotly)
plot_ly (x = learning19$锘縰nref, y = learning19$deep, z = learning19$orga, type= 'scatter3d', mode='markers', color = learning19$deep)
library(plotly)
plot_ly (x = learning19$锘縰nref, y = learning19$deep, z = learning19$orga, mode='markers', color = learning19$deep)
library(plot3D)
scatter3D(x = learning19$锘縰nref, y = learning19$deep, z = learning19$orga, col = NULL,
main = "learning19 data", xlab = "deep",
ylab ="unref", zlab = "orga")
library(plotly)
plot_ly (x = learning19$锘縰nref, y = learning19$deep, z = learning19$orga, type= 'scatter3d', mode='markers', color = learning19$deep)
library(plotly)
plot_ly (x = learning19$锘縰nref, y = learning19$deep, z = learning19$orga, type= 'scatter3d', mode='markers', color = learning19$deep)
library(plotly)
plot_ly (x = learning19$锘縰nref, y = learning19$deep, z = learning19$orga, type= 'scatter3d', mode='markers', color = learning19$deep)
install.packages(tidyverse)
install.packages("tidyverse")
library(tidyverse)
as.numeric("word")
as.numeric("word")
library(tidyverse)
df %>%
ggplot(aes(x, y)) + geom_point()
df %>%
ggplot(aes(y, x)) + geom_point()
# this chunk generates the data, and you can ignore it
set.seed(1)
df  <- tibble(group = sample(c(rep(1:2, each=30))),
gender = sample(c(rep(c('M', 'F'), 28), rep(999,4))),
score1 = rnorm(60, 18, 2),
score2 = as.character(runif(60, 0.7, 1.1)*score1))
df
library(tidyverse)
library(lubridate) # for working with dates
set.seed(1)
df  <- tibble(group = sample(c(rep(1:4, each=12), rep(999,2))),
birthdate = c(seq(as.Date('1980/01/01'), as.Date('1990/01/01'), by="day")) %>% sample(50),
gender = sample(c('M', 'F'), 50, replace=TRUE),
attitude = sample(c('Strongly disagree', 'Disagree', 'Neither agree or disagree', 'Agree', 'Strongly agree'), 50, replace=TRUE))
df
df %>% summary()
df %>% summary()
df
df <- df %>%
mutate(age = time_length(interval(birthdate, today()), "years") %>% floor(), # floor rounds downwards
group = na_if(group, 999)) %>%
select(-birthdate)
df <- df %>%
mutate(age = time_length(interval(birthdate, today()), "years") %>% floor(), # floor rounds downwards
group = na_if(group, 999)) %>%
select(-birthdate)
summary(df)
df %>% summary()
str(df)
summary(df)
str(df)
distinct(df)
summary(df)
str(df)
summary(df)
distinct(df)
df
# this chunk generates the data, and you can ignore it
set.seed(1)
df  <- tibble(group = sample(c(rep(1:2, each=30))),
gender = sample(c(rep(c('M', 'F'), 28), rep(999,4))),
score1 = rnorm(60, 18, 2),
score2 = as.character(runif(60, 0.7, 1.1)*score1))
df
str(df)
summary(df)
distinct(df)
summary(iris)
df %>%
count(group, gender) %>% # count() is a combination of group_by() and tally()
arrange(desc(n)) %>%
arrange(group)
df %>%
count(group, gender) %>% # count() is a combination of group_by() and tally()
arrange(desc(n)) %>%
arrange(group)
df <- df %>%
mutate(gender = na_if(gender, 999)) %>% floor(), # floor rounds downwards
df <- df %>%
mutate(gender = na_if(gender, 999)) %>% floor() # floor rounds downwards
df <- df %>%
mutate(gender = na_if(gender, 999))
group = na_if(group, 999))
df <- df %>%
mutate(gender = na_if(gender, 999))
group = na_if(group, 999))
df <- df %>%
mutate(gender = na_if(gender, 999))
group = na_if(group, 999))
df <- df %>%
mutate(gender = na_if(gender, 999)
group = na_if(group, 999))
df <- df %>%
mutate(gender = na_if(gender, 999))
df <- df %>%
mutate(gender = na_if(gender, 999))
df
df %>%
count(group, gender) %>% # count() is a combination of group_by() and tally()
arrange(desc(n)) %>%
arrange(group)
df %>%
count(group, gender) %>% # count() is a combination of group_by() and tally()
arrange(desc(n)) %>% # OR: "%>% floor()"?
arrange(group)
df %>%
count(group, gender) %>% # count() is a combination of group_by() and tally()
arrange(desc(n)) %>% # OR: "%>% floor()"?
df %>%
count(group, gender) %>% # count() is a combination of group_by() and tally()
arrange(desc(n)) %>% # OR: "%>% floor()"?
arrange(group)
df %>%
score_diff <- df$score1 - df$score2
df <- df %>%
mutate(gender = na_if(gender, 999)) # recode 999 to NA (missing)
as. numeric(score2) # to convert a character vector to a numeric vector
df <- df %>%
mutate(gender = na_if(gender, 999)) # recode 999 to NA (missing)
as.numeric(score2) # to convert a character vector to a numeric vector
df <- df %>%
mutate(gender = na_if(gender, 999)) # recode 999 to NA (missing)
as.numeric(df$score2) # to convert a character vector to a numeric vector
df <- df %>%
mutate(gender = na_if(gender, 999)) # recode 999 to NA (missing)
as.numeric(df$score2) # to convert a character vector to a numeric vector
df
df <- df %>%
mutate(gender = na_if(gender, 999)) # recode 999 to NA (missing)
as.numeric(df$score2) # to convert a character vector to a numeric vector
df
df <- df %>%
mutate(gender = na_if(gender, 999)) # recode 999 to NA (missing)
as.numeric(score2) # to convert a character vector to a numeric vector
df <- df %>%
mutate(gender = na_if(gender, 999)) # recode 999 to NA (missing)
as.numeric(score2) # to convert a character vector to a numeric vector
df <- df %>%
mutate(gender = na_if(gender, 999)) # recode 999 to NA (missing)
as.numeric(df$score2) # to convert a character vector to a numeric vector
df
df <- df %>%
mutate(gender = na_if(gender, 999)) # recode 999 to NA (missing)
as.numeric(df$score2) # to convert a character vector to a numeric vector
str(df)
df <- df %>%
mutate(gender = na_if(gender, 999)) # recode 999 to NA (missing)
score2  <- as.numeric(df$score2) # to convert a character vector to a numeric vector
str(df)
df <- df %>%
mutate(gender = na_if(gender, 999)) # recode 999 to NA (missing)
score2  <- as.numeric(df$score2) # to convert a character vector to a numeric vector
str(df)
df <- df %>%
mutate(gender = na_if(gender, 999)) # recode 999 to NA (missing)
score2 <- as.numeric(df$score2) # to convert a character vector to a numeric vector
str(df)
df <- df %>%
mutate(gender = na_if(gender, 999)) # recode 999 to NA (missing)
score2 <- as.numeric(df$score2) # to convert a character vector to a numeric vector
str(df)
df <- df %>%
mutate(gender = na_if(gender, 999)) # recode 999 to NA (missing)
df$score2 <- as.numeric(df$score2) # to convert a character vector to a numeric vector
str(df)
df <- df %>%
mutate(gender = na_if(gender, 999)) # recode 999 to NA (missing)
df$score2 <- as.numeric(df$score2) # to convert a character vector to a numeric vector
df %>%
count(group, gender) %>% # count() is a combination of group_by() and tally()
arrange(desc(n)) %>% # OR: "%>% floor()"?
arrange(group)
df %>%
score_diff <- df$score1 - df$score2
df %>%
df$score_diff <- df$score1 - df$score2
df$score_diff <- df$score1 - df$score2
df$score_diff <- df$score1 - df$score2
df
df$score_diff <- df$score1 - df$score2
df %>%
rownames_to_column('sbj_id')
df %>%
distinct(gender)
df %>%
distinct(group)
df %>%
distinct(attitude)
df %>%
count(group, gender) %>%
group_by(group) %>% # find the percentages of F/M within each group
mutate(percentage = prop.table(n) %>% round(2)) %>%
ungroup()
df %>%
summarise(mean = mean(score1))
score_diff <- score1 - score2
df$score_diff <- df$score1 - df$score2
df
df %>%
summarise(mean = mean(score1), mean = mean(score2), mean = mean(score_diff))
df %>%
summarise(mean = mean(df$score1), mean = mean(df$score2), mean = mean(df$score_diff))
df %>%
group_by(group, gender) %>%
summarise(attitude_mean = mean(attitude_num),
attitude_median = median(attitude_num),
attitude_sd = sd(attitude_num),
n = n()) %>%
mutate(across(is_double, round, 2)) # this rounds the mean, median and sd to 2 decimals
df %>%
summarise(score1_mean = mean(df$score1), score2_mean = mean(df$score2), score_diff_mean = mean(df$score_diff))
%>%
df %>%
summarise(score1_mean = mean(df$score1), score2_mean = mean(df$score2), score_diff_mean = mean(df$score_diff))
mutate(across(is_double, round, 2))
df %>%
summarise(score1_mean = mean(df$score1), score2_mean = mean(df$score2), score_diff_mean = mean(df$score_diff))
df %>%
summarise(score1_mean = mean(df$score1), score2_mean = mean(df$score2), score_diff_mean = mean(df$score_diff))
mutate(across(is_double, round, 2)) # this rounds the mean, median and sd to 2 decimals
library(dplyr)
df %>%
summarise(score1_mean = mean(df$score1), score2_mean = mean(df$score2), score_diff_mean = mean(df$score_diff))
mutate(across(is_double, round, 2)) # this rounds the mean, median and sd to 2 decimals
library(dplyr)
df %>%
summarise(score1_mean = mean(df$score1), score2_mean = mean(df$score2), score_diff_mean = mean(df$score_diff))
mutate(across(is_double, round, 2)) # this rounds the mean, median and sd to 2 decimals
df %>%
summarise(score1_mean = mean(df$score1), score2_mean = mean(df$score2), score_diff_mean = mean(df$score_diff))
df %>%
count(group)
df %>%
count(group, gender) %>% # count() is a combination of group_by() and tally()
arrange(desc(n)) %>%
arrange(group)
df %>%
count(gender) %>%
mutate(percentage = prop.table(n))
df %>%
count(group, gender) %>%
group_by(group) %>% # find the percentages of F/M within each group
mutate(percentage = prop.table(n) %>% round(2)) %>%
ungroup()
df %>%
summarise(score1_mean = mean(df$score1), score2_mean = mean(df$score2), score_diff_mean = mean(df$score_diff)) %>%
group_by(gender)
df %>%
summarise(score1_mean = mean(df$score1), score2_mean = mean(df$score2), score_diff_mean = mean(df$score_diff)) %>%
group_by(gender)
df %>%
summarise(score1_mean = mean(df$score1), score2_mean = mean(df$score2), score_diff_mean = mean(df$score_diff))
df
df %>%
summarise(score1_mean = mean(df$score1), score2_mean = mean(df$score2), score_diff_mean = mean(df$score_diff))
df %>%
summarise(score1_mean = mean(df$score1), score2_mean = mean(df$score2), score_diff_mean = mean(df$score_diff))
grouped_df <- df %>%
group_by(gender)
grouped_df %>%
summarise(mean_age = mean(age))
grouped_df <- df %>%
group_by(gender)
grouped_df %>%
summarise(score1_mean = mean(df$score1), score2_mean = mean(df$score2), score_diff_mean = mean(df$score_diff))
grouped_df <- df %>%
group_by(gender)
grouped_df %>%
summarise(score1_mean = mean(df$score1), score2_mean = mean(df$score2), score_diff_mean = mean(df$score_diff))
grouped_df <- df %>%
group_by(gender)
grouped_df %>%
summarise(score1_mean = mean(df$score1), score2_mean = mean(df$score2), score_diff_mean = mean(df$score_diff))
grouped_df <- df %>%
group_by(gender)
grouped_df %>%
summarise(score1_mean = mean(df$score1), score2_mean = mean(df$score2), score_diff_mean = mean(df$score_diff))
grouped_df <- df %>%
group_by(gender)
grouped_df %>%
summarise(score1_mean = mean(df$score1), score2_mean = mean(df$score2), score_diff_mean = mean(df$score_diff))
grouped_df <- df %>%
group_by(gender)
summarise(score1_mean = mean(df$score1), score2_mean = mean(df$score2), score_diff_mean = mean(df$score_diff))
grouped_df <- df %>%
group_by(gender)
grouped_df %>%
summarise(score1_mean = mean(df$score1), score2_mean = mean(df$score2), score_diff_mean = mean(df$score_diff))
# the results look strange but I do not know what went wrong
str(iris)
levels(iris$Species)
iris %>%
ggplot(aes(Sepal.Length, Sepal.Width)) + # x = Sepal.Length, y = Sepal.Width
geom_point()
df %>%
ggplot(aes(score1, score2)) + # x = score1, y = Sscore2
geom_point()
iris %>%
ggplot(aes(Sepal.Length, Sepal.Width)) +
labs(title = "Scatter plot of sepal length and sepal width", subtitle = "Iris dataset",
x = "Sepal length (cm)", y = "Sepal width (cm)") +
geom_point()
iris %>%
ggplot(aes(Sepal.Length, Sepal.Width)) +
geom_point() +
labs(title = "Scatter plot of sepal length and sepal width", subtitle = "Iris dataset",
x = "Sepal length (cm)", y = "Sepal width (cm)") +
geom_smooth(method = "lm")
iris %>%
ggplot() +
geom_point(aes(Sepal.Length, Sepal.Width)) +
labs(title = "Scatter plot of sepal length and sepal width", subtitle = "Iris dataset",
x = "Sepal length (cm)", y = "Sepal width (cm)") +
geom_smooth(aes(Sepal.Length, Sepal.Width), method = "lm")
iris %>%
ggplot(aes(Sepal.Length, Sepal.Width, color = Species)) +
geom_point() +
labs(title = "Scatter plot of sepal length and sepal width", subtitle = "Iris dataset",
x = "Sepal length (cm)", y = "Sepal width (cm)")
df %>%
ggplot(aes(score1, score2), color = gender) + # x = score1, y = Sscore2
geom_point()
df %>%
ggplot(aes(score1, score2, color = gender)) + # x = score1, y = Sscore2
geom_point()
df %>%
ggplot(aes(score1, score2, color = gender)) + # x = score1, y = Sscore2
geom_point()
