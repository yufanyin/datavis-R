library(corrplot)
library(ggplot2)
library(GGally)
ov_learning19 <- ggpairs(learning19, mapping = aes(), title ="Overview of learning2019", lower = list(combo = wrap("facethist", bins = 20)), upper = list(continuous = wrap("cor", size = 2.8)))
ov_learning19
summary(learning19)
cor_matrix<-cor(learning19[1:9]) %>% round(digits = 2)
cor_matrix
library(corrplot)
p.mat <- cor.mtest(cor_matrix)$p
corrplot(cor_matrix, method="circle", type="upper",  tl.cex = 0.6, p.mat = p.mat, sig.level = 0.01, title="Correlations of learning19", mar=c(0,0,1,0))
learning19_scaled <- scale(learning19[1:9])
summary(learning19_scaled)
class(learning19_scaled)
learning19_scaled <- as.data.frame(learning19_scaled)
summary(learning19_scaled$deep)
bins <- quantile(learning19_scaled$deep)
bins
deep2 <- cut(learning19_scaled$deep, breaks = bins, include.lowest = TRUE, labels = c("low", "med_low", "med_high", "high"))
table(deep2)
learning19_scaled <- dplyr::select(learning19_scaled, -deep)
learning19_scaled <- data.frame(learning19_scaled, deep2)
learning19_scaled <- dplyr::select(learning19_scaled, -deep)
n_learning19 <- nrow(learning19_scaled)
ind_learning19 <- sample(n_learning19,  size = n_learning19 * 0.8)
learning19_train <- learning19_scaled[ind_learning19,]
learning19_test <- learning19_scaled[-ind_learning19,]
correct_classes <- learning19_test$deep2
correct_classes
n_learning19 <- nrow(learning19_scaled)
ind_learning19 <- sample(n_learning19,  size = n_learning19 * 0.8)
learning19_train <- learning19_scaled[ind_learning19,]
learning19_test <- learning19_scaled[-ind_learning19,]
correct_classes <- learning19_test$deep2
correct_classes
learning19_test <- dplyr::select(learning19_test, -deep2)
library(dplyr)
lda.fit <- lda(deep2 ~ ., data = learning19_train)
library(dplyr)
lda.fit <- lda(deep2 ~ ., data = learning19_train)
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "orange", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "orange", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(learning19_train$deep2)
plot(lda.fit, dimen = 2, col = classes, pch = classes, main = "LDA biplot of learning19 train set")
learning19$gender <- as.character(learning19$gender) # convert to a character vector
learning19$cluster <- as.character(learning19$cluster)
library(ggplot2)
learning19 %>%
ggplot(aes(orga, procrastination, color = cluster)) + # x = orga, y = procrastination
geom_point()
learning19 %>%
gender <- as.character(learning19$gender) # convert to a character vector
learning19 %>%
gender = as.character(learning19$gender) # convert to a character vector
learning19 %>%
gender = as.character(learning19$gender) # convert to a character vector
learning19 %>%
gender = as.character(learning19$gender) # convert to a character vector
learning19 <- learning19 %>%
mutate(gender = character(learning19$gender)
cluster = character(learning19$cluster)
learning19 <- learning19 %>%
mutate(gender = character(learning19$gender)
cluster = character(learning19$cluster))
library(ggplot2)
learning19 %>%
ggplot(aes(orga, procrastination, color = cluster)) + # x = orga, y = procrastination
geom_point()
learning19$gender <- as.character(learning19$gender)
learning19$cluster <- as.character(learning19$cluster)
learning19 <- learning19 %>%
mutate(gender = as.character(learning19$gender),
cluster = as.character(learning19$cluster))
learning19 <- learning19 %>%
mutate(gender = as.character(gender),
cluster = as.character(cluster))
library(ggplot2)
learning19 %>%
ggplot(aes(orga, procrastination, color = cluster)) + # x = orga, y = procrastination
geom_point()
library(ggplot2)
learning19 %>%
ggplot(aes(orga, procrastination, color = cluster)) + # x = orga, y = procrastination
geom_point()
learning19_scaled <- scale(learning19[1:9])
summary(learning19_scaled)
class(learning19_scaled)
learning19_scaled <- as.data.frame(learning19_scaled)
summary(learning19_scaled$deep)
bins <- quantile(learning19_scaled$deep)
bins
deep2 <- cut(learning19_scaled$deep, breaks = bins, include.lowest = TRUE, labels = c("low", "med_low", "med_high", "high"))
table(deep2)
learning19_scaled <- dplyr::select(learning19_scaled, -deep)
learning19_scaled <- data.frame(learning19_scaled, deep2)
n_learning19 <- nrow(learning19_scaled)
ind_learning19 <- sample(n_learning19,  size = n_learning19 * 0.8)
learning19_train <- learning19_scaled[ind_learning19,]
learning19_test <- learning19_scaled[-ind_learning19,]
correct_classes <- learning19_test$deep2
correct_classes
learning19_test <- dplyr::select(learning19_test, -deep2)
learning19_scaled <- scale(learning19[1:9])
summary(learning19_scaled)
class(learning19_scaled)
learning19_scaled <- as.data.frame(learning19_scaled)
summary(learning19_scaled$deep)
bins <- quantile(learning19_scaled$deep)
bins
deep2 <- cut(learning19_scaled$deep, breaks = bins, include.lowest = TRUE, labels = c("low", "med_low", "med_high", "high"))
table(deep2)
learning19_scaled <- dplyr::select(learning19_scaled, -deep)
learning19_scaled <- data.frame(learning19_scaled, deep2)
n_learning19 <- nrow(learning19_scaled)
ind_learning19 <- sample(n_learning19,  size = n_learning19 * 0.8)
learning19_train <- learning19_scaled[ind_learning19,]
learning19_test <- learning19_scaled[-ind_learning19,]
correct_classes <- learning19_test$deep2
correct_classes
correct_classes <- learning19_test$deep2
correct_classes
learning19_test <- dplyr::select(learning19_test, -deep2)
n_learning19 <- nrow(learning19_scaled)
ind_learning19 <- sample(n_learning19,  size = n_learning19 * 0.8)
learning19_train <- learning19_scaled[ind_learning19,]
learning19_test <- learning19_scaled[-ind_learning19,]
correct_classes <- learning19_test$deep2
correct_classes
learning19_test <- dplyr::select(learning19_test, -deep2)
learning19_test <- dplyr::select(learning19_test, -deep2)
correct_classes <- learning19_test$deep2
correct_classes
class(learning19_scaled)
learning19_scaled <- as.data.frame(learning19_scaled)
summary(learning19_scaled$deep)
bins <- quantile(learning19_scaled$deep)
learning19_scaled <- scale(learning19[1:9])
summary(learning19_scaled)
class(learning19_scaled)
learning19_scaled <- as.data.frame(learning19_scaled)
summary(learning19_scaled$deep)
bins <- quantile(learning19_scaled$deep)
bins
deep2 <- cut(learning19_scaled$deep, breaks = bins, include.lowest = TRUE, labels = c("low", "med_low", "med_high", "high"))
table(deep2)
learning19_scaled <- dplyr::select(learning19_scaled, -deep)
learning19_scaled <- data.frame(learning19_scaled, deep2)
n_learning19 <- nrow(learning19_scaled)
ind_learning19 <- sample(n_learning19,  size = n_learning19 * 0.8)
learning19_train <- learning19_scaled[ind_learning19,]
learning19_test <- learning19_scaled[-ind_learning19,]
correct_classes <- learning19_test$deep2
correct_classes
learning19_test <- dplyr::select(learning19_test, -deep2)
learning19_test <- dplyr::select(learning19_test, -deep2)
learning19_test <- dplyr::select(learning19_test, -deep2)
learning19_test <- dplyr::select(learning19_test, -deep2)
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "orange", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(learning19_train$deep2)
plot(lda.fit, dimen = 2, col = classes, pch = classes, main = "LDA biplot of learning19 train set")
lda.pred <- predict(lda.fit, newdata = learning19_test)
pred_table <- table(correct = correct_classes, predicted = lda.pred$class)
pred_table
learning19_eu <- dist(learning19[1:3])
summary(learning19_eu)
set.seed(123)
k_max <- 5 # determine the number of clusters
twcss <- sapply(1:k_max, function(k){kmeans(learning19[1:3], k)$tot.withinss}) # calculate the total within sum of squares
qplot(x = 1:k_max, y = twcss, geom = 'line') # visualize the results
learning19_km <- kmeans(learning19[1:9], centers = 3)
pairs(learning19[1:9], col = learning19_km$cluster)
pairs(learning19[,1:3], col = learning19_km$cluster)
pairs(learning19[,4:9], col = learning19_km$cluster)
learning19_scaled3 <- scale(learning19[1:9])
learning19_km3 <-kmeans(learning19_scaled3, centers = 3)
cluster <- learning19_km3$cluster
learning19_scaled3 <- data.frame(learning19_scaled3, cluster)
lda.fit_cluster <- lda(cluster ~ ., data = learning19_scaled3)
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "orange", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes3 <- as.numeric(learning19_scaled3$cluster)
plot(lda.fit_cluster, dimen = 2, col = classes3, pch = classes3, main = "LDA biplot using three clusters")
model_predictors <- dplyr::select(learning19_train, -deep2)
# check the dimensions
dim(model_predictors)
dim(lda.fit$scaling)
# matrix multiplication
matrix_product <- as.matrix(model_predictors) %*% lda.fit$scaling
matrix_product <- as.data.frame(matrix_product)
library(plotly)
plot_ly (x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = learning19_train$deep2)
library(plot3D)
scatter3D(x = learning19$锘縰nref, y = learning19$deep, z = learning19$orga, col = NULL,
main = "learning19 data", xlab = "deep",
ylab ="unref", zlab = "orga")
library(plotly)
plot_ly (x = learning19$锘縰nref, y = learning19$deep, z = learning19$orga, type= 'scatter3d', mode='markers', color = learning19$deep)
learning19 <- read.csv(file = "D:/Users/yinyf/datavis-R/week0/learning2019.csv", stringsAsFactors = TRUE)
str(learning19)
learning2019 <- read.csv(file = "D:/Users/yinyf/datavis-R/week0/learning2019.csv", stringsAsFactors = TRUE)
learning19 <- learning2019[1:13]
str(learning19)
library(tidyr)
library(dplyr)
library(corrplot)
library(ggplot2)
library(GGally)
ov_learning19 <- ggpairs(learning19, mapping = aes(), title ="Overview of learning2019", lower = list(combo = wrap("facethist", bins = 20)), upper = list(continuous = wrap("cor", size = 2.8)))
ov_learning19
summary(learning19)
cor_matrix<-cor(learning19[1:9]) %>% round(digits = 2)
cor_matrix
cor_matrix<-cor(learning19[1:9]) %>% round(digits = 2)
cor_matrix
library(corrplot)
p.mat <- cor.mtest(cor_matrix)$p
cor_matrix<-cor(learning19[2:10]) %>% round(digits = 2)
cor_matrix
cor_matrix<-cor(learning19[2:10]) %>% round(digits = 2)
cor_matrix
cor_matrix<-cor(learning19[2:10]) %>% round(digits = 2)
cor_matrix
cor_matrix<-cor(learning19[2:10]) %>% round(digits = 2)
cor_matrix
library(corrplot)
p.mat <- cor.mtest(cor_matrix)$p
library(corrplot)
p.mat <- cor.mtest(cor_matrix)$p
learning19 <- learning19 %>%
mutate(gender = as.character(gender))
library(ggplot2)
learning19 %>%
ggplot(aes(orga, procrastination, color = cluster)) + # x = orga, y = procrastination
geom_point()
library(ggplot2)
learning19 %>%
ggplot(aes(orga, procrastination)) + # x = orga, y = procrastination
geom_point()
learning2019 <- read.csv(file = "D:/Users/yinyf/datavis-R/week0/learning2019_w4.csv", stringsAsFactors = TRUE)
learning19 <- learning2019[1:13]
str(learning19)
library(tidyr)
library(dplyr)
library(corrplot)
library(ggplot2)
library(GGally)
ov_learning19 <- ggpairs(learning19, mapping = aes(), title ="Overview of learning2019", lower = list(combo = wrap("facethist", bins = 20)), upper = list(continuous = wrap("cor", size = 2.8)))
ov_learning19
summary(learning19)
summary(learning19)
learning19 <- learning19 %>%
mutate(gender = as.character(gender))
library(ggplot2)
learning19 %>%
ggplot(aes(orga, procrastination, color = cluster)) + # x = orga, y = procrastination
geom_point()
library(ggplot2)
learning19 %>%
ggplot(aes(orga, procrastination, color = cluster)) + # x = orga, y = procrastination
geom_point()
library(ggplot2)
learning19 %>%
ggplot(aes(orga, procrastination, color = cluster)) + # x = orga, y = procrastination
geom_point()
library(ggplot2)
learning19 %>%
ggplot(aes(orga, procrastination, color = cluster)) + # x = orga, y = procrastination
geom_point()
library(ggplot2)
learning19 %>%
ggplot(aes(orga, procrastination)) + # x = orga, y = procrastination
geom_point()
learning2019 <- read.csv(file = "D:/Users/yinyf/datavis-R/week0/learning2019_w4.csv", stringsAsFactors = TRUE)
learning19 <- learning2019[1:13]
str(learning19)
library(tidyr)
library(dplyr)
library(corrplot)
library(ggplot2)
library(GGally)
ov_learning19 <- ggpairs(learning19, mapping = aes(), title ="Overview of learning2019", lower = list(combo = wrap("facethist", bins = 20)), upper = list(continuous = wrap("cor", size = 2.8)))
ov_learning19
summary(learning19)
learning19 <- learning19 %>%
mutate(gender = as.character(gender))
library(ggplot2)
learning19 %>%
ggplot(aes(orga, procrastination, color = cluster)) + # x = orga, y = procrastination
geom_point()
learning19 <- learning19 %>%
mutate(gender = as.character(gender),
cluster = as.character(cluster))
learning2019 <- read.csv(file = "D:/Users/yinyf/datavis-R/week0/learning2019_w4.csv", stringsAsFactors = TRUE)
learning19 <- learning2019[1:13]
str(learning19)
library(tidyr)
library(dplyr)
library(corrplot)
library(ggplot2)
library(GGally)
ov_learning19 <- ggpairs(learning19, mapping = aes(), title ="Overview of learning2019", lower = list(combo = wrap("facethist", bins = 20)), upper = list(continuous = wrap("cor", size = 2.8)))
ov_learning19
summary(learning19)
summary(learning19)
cor_matrix<-cor(learning19[2:10]) %>% round(digits = 2)
cor_matrix
library(corrplot)
p.mat <- cor.mtest(cor_matrix)$p
learning2019 <- read.csv(file = "D:/Users/yinyf/datavis-R/week0/learning2019_w4.csv", stringsAsFactors = TRUE)
learning19 <- learning2019[1:13]
str(learning19)
library(tidyr)
library(dplyr)
library(corrplot)
library(ggplot2)
library(GGally)
ov_learning19 <- ggpairs(learning19, mapping = aes(), title ="Overview of learning2019", lower = list(combo = wrap("facethist", bins = 20)), upper = list(continuous = wrap("cor", size = 2.8)))
ov_learning19
summary(learning19)
cor_matrix<-cor(learning19[2:10]) %>% round(digits = 2)
cor_matrix
cor_matrix<-cor(learning19[2:10]) %>% round(digits = 2)
cor_matrix
library(corrplot)
p.mat <- cor.mtest(cor_matrix)$p
ov_learning19 <- ggpairs(learning19, mapping = aes(), title ="Overview of learning2019", lower = list(combo = wrap("facethist", bins = 20)), upper = list(continuous = wrap("cor", size = 2.8)))
ov_learning19
summary(learning19)
library(ggplot2)
learning19 %>%
ggplot(aes(orga, procrastination, color = cluster)) + # x = orga, y = procrastination
geom_point()
library(ggplot2)
learning19 %>%
ggplot(aes(orga, procrastination, color = cluster)) + # x = orga, y = procrastination
geom_point()
library(ggplot2)
learning19 %>%
ggplot(aes(orga, procrastination, color = cluster)) + # x = orga, y = procrastination
geom_point()
library(ggplot2)
learning19 %>%
ggplot(aes(orga, procrastination, color = cluster))
learning19 <- learning19 %>%
mutate(gender = as.character(gender),
cluster = as.character(cluster))
learning19 %>%
ggplot(aes(orga, procrastination, color = cluster))
learning19_scaled <- scale(learning19[2:10])
summary(learning19_scaled)
class(learning19_scaled)
learning19_scaled <- as.data.frame(learning19_scaled)
summary(learning19_scaled$deep)
bins <- quantile(learning19_scaled$deep)
bins
deep2 <- cut(learning19_scaled$deep, breaks = bins, include.lowest = TRUE, labels = c("low", "med_low", "med_high", "high"))
table(deep2)
learning19_scaled <- dplyr::select(learning19_scaled, -deep)
learning19_scaled <- data.frame(learning19_scaled, deep2)
n_learning19 <- nrow(learning19_scaled)
ind_learning19 <- sample(n_learning19,  size = n_learning19 * 0.8)
learning19_train <- learning19_scaled[ind_learning19,]
learning19_test <- learning19_scaled[-ind_learning19,]
correct_classes <- learning19_test$deep2
correct_classes
lda.fit <- lda(deep2 ~ ., data = learning19_train)
learning19_eu <- dist(learning19[2:4])
summary(learning19_eu)
set.seed(123)
k_max <- 5 # determine the number of clusters
twcss <- sapply(1:k_max, function(k){kmeans(learning19[1:3], k)$tot.withinss}) # calculate the total within sum of squares
set.seed(123)
k_max <- 5 # determine the number of clusters
twcss <- sapply(1:k_max, function(k){kmeans(learning19[2:4], k)$tot.withinss}) # calculate the total within sum of squares
set.seed(123)
k_max <- 5 # determine the number of clusters
twcss <- sapply(1:k_max, function(k){kmeans(learning19[2:4], k)$tot.withinss}) # calculate the total within sum of squares
set.seed(123)
k_max <- 5 # determine the number of clusters
twcss <- sapply(1:k_max, function(k){kmeans(learning19[2:4], k)$tot.withinss}) # calculate the total within sum of squares
set.seed(123)
k_max <- 5 # determine the number of clusters
twcss <- sapply(1:k_max, function(k){kmeans(learning19[2:4], k)$tot.withinss}) # calculate the total within sum of squares
set.seed(123)
k_max <- 5 # determine the number of clusters
twcss <- sapply(1:k_max, function(k){kmeans(learning19[2:4], k)$tot.withinss}) # calculate the total within sum of squares
set.seed(123)
k_max <- 5 # determine the number of clusters
twcss <- sapply(1:k_max, function(k){kmeans(learning19[2:4], k)$tot.withinss}) # calculate the total within sum of squares
set.seed(123)
k_max <- 5 # determine the number of clusters
twcss <- sapply(1:k_max, function(k){kmeans(learning19[2:4], k)$tot.withinss}) # calculate the total within sum of squares
set.seed(123)
k_max <- 5 # determine the number of clusters
twcss <- sapply(1:k_max, function(k){kmeans(learning19[2:4], k)$tot.withinss}) # calculate the total within sum of squares
set.seed(123)
k_max <- 5 # determine the number of clusters
twcss <- sapply(1:k_max, function(k){kmeans(learning19[2:4], k)$tot.withinss}) # calculate the total within sum of squares
learning19_km <- kmeans(learning19[1:9], centers = 3)
learning19_km <- kmeans(learning19[2:10], centers = 3)
learning19_km <- kmeans(learning19[2:10], centers = 3)
learning19_km <- kmeans(learning19[2:10], centers = 3)
learning19_km <- kmeans(learning19[2:10], centers = 3)
set.seed(123)
k_max <- 5 # determine the number of clusters
twcss <- sapply(1:k_max, function(k){kmeans(learning19[2:4], k)$tot.withinss}) # calculate the total within sum of squares
set.seed(123)
k_max <- 5 # determine the number of clusters
twcss <- sapply(1:k_max, function(k){kmeans(learning19[2:4], k)$tot.withinss}) # calculate the total within sum of squares
set.seed(123)
k_max <- 5 # determine the number of clusters
twcss <- sapply(2:k_max, function(k){kmeans(learning19[2:4], k)$tot.withinss}) # calculate the total within sum of squares
set.seed(123)
k_max <- 5 # determine the number of clusters
twcss <- sapply(1:k_max, function(k){kmeans(learning19[2:4], k)$tot.withinss}) # calculate the total within sum of squares
set.seed(123)
k_max <- 5 # determine the number of clusters
twcss <- sapply(1:k_max, function(k){kmeans(learning19[2:4], k)$tot.withinss}) # calculate the total within sum of squares
set.seed(123)
k_max <- 5 # determine the number of clusters
twcss <- sapply(1:k_max, function(k){kmeans(learning19[2:4], k)$tot.withinss}) # calculate the total within sum of squares
set.seed(123)
k_max <- 5 # determine the number of clusters
twcss <- sapply(1:k_max, function(k){kmeans(learning19[2:4], k)$tot.withinss}) # calculate the total within sum of squares
library(dplyr)
set.seed(123)
k_max <- 5 # determine the number of clusters
twcss <- sapply(1:k_max, function(k){kmeans(learning19[2:4], k)$tot.withinss}) # calculate the total within sum of squares
library(dplyr)
set.seed(123)
k_max <- 5 # determine the number of clusters
twcss <- sapply(1:k_max, function(k){kmeans(learning19[2:4], k)$tot.withinss}) # calculate the total within sum of squares
learning19_km <- kmeans(learning19[2:10], centers = 3)
pairs(learning19[1:9], col = learning19_km$cluster)
pairs(learning19[,1:3], col = learning19_km$cluster)
pairs(learning19[,4:9], col = learning19_km$cluster)
learning19_scaled3 <- scale(learning19[2:10])
learning19_km3 <-kmeans(learning19_scaled3, centers = 3)
learning19 %>%
ggplot(aes(orga, procrastination, color = cluster)) + # x = orga, y = procrastination
geom_point()
pairs(learning19[2:10], col = learning19_km$cluster)
pairs(learning19[,2:4], col = learning19_km$cluster)
pairs(learning19[,5:10], col = learning19_km$cluster)
learning19_km <- kmeans(learning19[2:10], centers = 3)
model_predictors <- dplyr::select(learning19_train, -deep2)
# check the dimensions
dim(model_predictors)
dim(lda.fit$scaling)
# matrix multiplication
matrix_product <- as.matrix(model_predictors) %*% lda.fit$scaling
matrix_product <- as.data.frame(matrix_product)
library(plotly)
plot_ly (x = matrix_product$LD1, y = matrix_product$LD2, z = matrix_product$LD3, type= 'scatter3d', mode='markers', color = learning19_train$deep2)
library(plot3D)
scatter3D(x = learning19$锘縰nref, y = learning19$deep, z = learning19$orga, col = NULL,
library(plot3D)
scatter3D(x = learning19$unref, y = learning19$deep, z = learning19$orga, col = NULL,
main = "learning19 data", xlab = "deep",
ylab ="unref", zlab = "orga")
library(plotly)
plot_ly (x = learning19$unref, y = learning19$deep, z = learning19$orga, type= 'scatter3d', mode='markers', color = learning19$deep)
learning19_km <- kmeans(learning19[2:10], centers = 3)
learning19_km <- kmeans(learning19[2:10], centers = 3)
learning19_km <- kmeans(learning19[2:10], centers = 3)
learning19_km <- kmeans(learning19[2:10], centers = 3)
learning19_scaled3 <- scale(learning19[2:4])
learning19_km3 <-kmeans(learning19_scaled3, centers = 3)
learning19_scaled3 <- scale(learning19[2:4])
learning19_km3 <-kmeans(learning19_scaled3, centers = 3)
learning19_scaled3 <- scale(learning19[2:4])
learning19_km3 <-kmeans(learning19_scaled3, centers = 3)
install.packages("displayr")
install.packages("displayr")
library(displayr)
library(displayr)
library(flipMultivariates)
install.packages("flipMultivariates")
install.packages("flipMultivariates")
library(flipMultivariates)
library(flipMultivariates)
library(devtools)
install_github("Displayr/flipMultivariates")
install.packages("devtools")
install.packages("flipMultivariates")
