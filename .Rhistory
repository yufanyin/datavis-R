str(df)
#### Base R
# Print variable of data frame
df$age
# The basic data type of R is a vector, created with c().
# Let's create a vector named "age", with 5 elements:
age <- c(13, 15, 12, 13, 16)
#### Base R
# Print variable of data frame
df$age
# Week 1: R Basics
########### Running code, assigning values to objects
# You can get output by simply typing into the console, or running (part of) a script file.
# You can run a line of code with the top right button, or Ctrl+Enter (see Tools -> Keyboard Shortcuts Help).
# Output is shown in the console (.R files, such as this), or in the editor (.Rmd files).
5+5
# Assign value (10) to object (x) with the arrow.
# You can choose object names quite freely, but it's best to avoid e.g. function names (mean, sd).
# Object names should start with a letter, and can contain letters, numbers, _ and .
# See Environment tab in RStudio!
x <- 10
# note: you could just as well use 10 -> x
# Print the object by just typing its name
x
x + 5
# Create a new object based on x
y <- 2*x
########### Vectors and functions
# The basic data type of R is a vector, created with c().
# Let's create a vector named "age", with 5 elements:
age <- c(13, 15, 12, 13, 16)
# Functions in R are of the form function_name(argument)
#  Some basic functions:
length(age)
mean(age)
summary(age)
str(age) # shows structure of the vector: type, length, first values
# Output from functions can also be saved to objects
mean_age <- mean(age)
# An object can be printed with text using the paste() function
paste("Mean age:", mean_age)
# Concatenate vectors with c(): here, we combine one new element (x) with the age vector
new_age <- c(age, x)
length(new_age)
#### Accessing the elements of a vector
# You can access individual elements of a vector with indices
age[1]
age[3]
age[1:3]
age[-5]
age[-length(age)]
# You can print elements that fulfill a condition
# which ages are above 13?
age > 13
cond <- (age > 13)
age[cond]
# Above, cond is a logical vector, i.e. it consists of TRUE/FALSE values only.
# There are also character (categorical) vectors.
firstname <- c("John", "Mark", "Jane", "Alice", "Sophie")
# Print the structure of the vector
str(firstname)
########### From vectors to data frames
# Multiple vectors can be combined into a data frame. It will also show up in the Environment tab.
df <- data.frame(age, firstname)
str(df)
# print your data frame
df
### Data wrangling: base R vs tidyverse
# Tidyverse is an alternative library to base R (the traditional style of R code),
# aiming for more readable and understandable code.
# Even if base R solutions may sometimes be shorter, they are usually uglier and/or less clear.
# Below are some examples with both styles. It's good to have an idea of the logic of base R;
# however, this course will focus on using tidyverse functions for data wrangling.
#### Base R
# Print variable of data frame
df$age
#### Base R
# Print variable of data frame
df$age
# Select variables age and age_centered
df[c(1,3)]
# Use the head() function to print the first 3 rows of your data frame.
head(df)
# Use the head() function to print the first 3 rows of your data frame.
head(df)[1,3]
# Use the head() function to print the first 3 rows of your data frame.
head(df) #
# Concatenate vectors with c(): here, we combine one new element (x) with the age vector
new_age <- c(age, x)
length(new_age)
# Select variables age and age_centered
df[c(1,3)]
# Create another vector named my_vector_2. It should have the elements of my_vector divided by 2.
number < 10
# Create another vector named my_vector_2. It should have the elements of my_vector divided by 2.
my_vector < 10
my_vector_2  <- (my_vector < 10)
number[cond]
my_vector_2 <- (my_vector < 10)
my_vector_2[cond]
my_vector_2
# Create another vector named my_vector_2. It should have the elements of my_vector divided by 2.
my_vector < 10
my_vector_2 <- (my_vector < 10)
my_vector_2
# Create a vector named my_vector. It should have 7 numeric elements.
my_vector <- c(2, 4, 6, 8, 10, 12, 20)
# Print your vector
my_vector
# Calculate the minimum, maximum, and median values of your vector
summary(my_vector)
# Print "The median value is XX"
mean_exercise1 <- mean(my_vector) # Output from functions can be saved to objects
paste("The median value is ", mean_exercise1) # Use the paste() function to print the object with text
# Create another vector named my_vector_2. It should have the elements of my_vector divided by 2.
my_vector_2 <- my_vector/2 # Access individual elements of a vector with indices
my_vector_2
# Create a vector named my_words. It should have 7 character elements.
my_words <- c("swan", "goose", "mallard", "blue_tit", "philomelos", "sparrow", "gull")
# Combine my_vector and my_words into a data frame.
df <- data.frame(my_vector, my_words)
df
# Use the head() function to print the first 3 rows of your data frame.
head(df) #How to print the first 3 rows instead of 5?
# Make new variable (here, centered age values)
df$age_centered <- (df$age - mean(df$age))
# Week 1: R Basics
########### Running code, assigning values to objects
# You can get output by simply typing into the console, or running (part of) a script file.
# You can run a line of code with the top right button, or Ctrl+Enter (see Tools -> Keyboard Shortcuts Help).
# Output is shown in the console (.R files, such as this), or in the editor (.Rmd files).
5+5
# Assign value (10) to object (x) with the arrow.
# You can choose object names quite freely, but it's best to avoid e.g. function names (mean, sd).
# Object names should start with a letter, and can contain letters, numbers, _ and .
# See Environment tab in RStudio!
x <- 10
# note: you could just as well use 10 -> x
# Print the object by just typing its name
x
x + 5
# Create a new object based on x
y <- 2*x
########### Vectors and functions
# The basic data type of R is a vector, created with c().
# Let's create a vector named "age", with 5 elements:
age <- c(13, 15, 12, 13, 16)
# Functions in R are of the form function_name(argument)
#  Some basic functions:
length(age)
mean(age)
summary(age)
str(age) # shows structure of the vector: type, length, first values
# Output from functions can also be saved to objects
mean_age <- mean(age)
# An object can be printed with text using the paste() function
paste("Mean age:", mean_age)
# Concatenate vectors with c(): here, we combine one new element (x) with the age vector
new_age <- c(age, x)
length(new_age)
#### Accessing the elements of a vector
# You can access individual elements of a vector with indices
age[1]
age[3]
age[1:3]
age[-5]
age[-length(age)]
# You can print elements that fulfill a condition
# which ages are above 13?
age > 13
cond <- (age > 13)
age[cond]
# Above, cond is a logical vector, i.e. it consists of TRUE/FALSE values only.
# There are also character (categorical) vectors.
firstname <- c("John", "Mark", "Jane", "Alice", "Sophie")
# Print the structure of the vector
str(firstname)
########### From vectors to data frames
# Multiple vectors can be combined into a data frame. It will also show up in the Environment tab.
df <- data.frame(age, firstname)
str(df)
# print your data frame
df
### Data wrangling: base R vs tidyverse
# Tidyverse is an alternative library to base R (the traditional style of R code),
# aiming for more readable and understandable code.
# Even if base R solutions may sometimes be shorter, they are usually uglier and/or less clear.
# Below are some examples with both styles. It's good to have an idea of the logic of base R;
# however, this course will focus on using tidyverse functions for data wrangling.
#### Base R
# Print variable of data frame
df$age
# Make new variable (here, centered age values)
df$age_centered <- (df$age - mean(df$age))
# Select variables age and age_centered
df[c(1,3)]
df[c("age", "age_centered")]
# Select variables that start with "age"
df[grepl("^age", names(df))] # this uses a thing called regular expressions
library(tidyverse) # load tidyverse
# Make age_centered variable with the mutate() function
df <- mutate(df, age_centered = age - mean(age))
# Select variables age and age_centered
select(df, age, age_centered)
# Create a new variable to the data frame which has the values of my_vector_2 (remember to save the new variable to the data frame object).
pair <- my_vector_2
df <- data.frame(my_vector, my_words, pair)
# Create a new variable to the data frame which has the values of my_vector_2 (remember to save the new variable to the data frame object).
pair <- c(my_vector_2)
pair
df <- data.frame(my_vector, my_words, pair)
my_vector_2 <- data.frame(my_vector, my_words, pair)
# Combine my_vector and my_words into a data frame.
df <- data.frame(my_vector, my_words)
df
df
# Create a new variable to the data frame which has the values of my_vector_2 (remember to save the new variable to the data frame object).
pair <- c(my_vector_2)
pair
my_vector_2 <- data.frame(my_vector, my_words, pair)
my_vector_2
my_vector_2 <- data.frame(my_vector, pair)
my_vector_2
pair
df2 <- data.frame(df, pair)
df2
df2 <- data.frame(pair)
df2
# Select variables age and age_centered
df[c(1,3)]
# Use filter() to print rows of your data frame greater than the median value of my_vector.
df %>%
filter(df2 >= mean(my_vector))
# Use filter() to print rows of your data frame greater than the median value of my_vector.
df2 %>%
filter(df2 > mean(my_vector))
# Use filter() to print rows of your data frame greater than the median value of my_vector.
df2 %>%
filter(df2 > mean(my_vector))
# Create a vector named my_vector. It should have 7 numeric elements.
my_vector <- c(2, 4, 6, 8, 10, 12, 16)
# Print your vector
my_vector
# Calculate the minimum, maximum, and median values of your vector
summary(my_vector)
# Print "The median value is XX"
mean_exercise1 <- mean(my_vector) # Output from functions can be saved to objects
paste("The median value is ", mean_exercise1) # Use the paste() function to print the object with text
# Create another vector named my_vector_2. It should have the elements of my_vector divided by 2.
my_vector_2 <- my_vector/2 # Access individual elements of a vector with indices
my_vector_2
# Create a vector named my_words. It should have 7 character elements.
my_words <- c("swan", "goose", "mallard", "blue_tit", "philomelos", "sparrow", "gull")
# Combine my_vector and my_words into a data frame.
df <- data.frame(my_vector, my_words)
df
# Show the structure of the data frame.
str(df)
library(tidyverse)
# Use the head() function to print the first 3 rows of your data frame.
head(df) #How to print the first 3 rows instead of 5?
# Create a new variable to the data frame which has the values of my_vector_2 (remember to save the new variable to the data frame object).
pair <- c(my_vector_2)
pair
df2 <- data.frame(pair)
df2
# Use filter() to print rows of your data frame greater than the median value of my_vector.
df2 %>%
filter(df2 > mean(my_vector))
# Create a vector named my_vector. It should have 7 numeric elements.
my_vector <- c(2, 4, 6, 8, 10, 12, 16)
# Create a vector named my_vector. It should have 7 numeric elements.
my_vector <- c(2, 4, 6, 8, 10, 12, 16)
# Create a vector named my_vector. It should have 7 numeric elements.
my_vector <- c(2, 4, 6, 8, 10, 12, 16)
# Print your vector
my_vector
# Calculate the minimum, maximum, and median values of your vector
summary(my_vector)
# Print "The median value is XX"
mean_exercise1 <- mean(my_vector) # Output from functions can be saved to objects
paste("The median value is ", mean_exercise1) # Use the paste() function to print the object with text
# Create another vector named my_vector_2. It should have the elements of my_vector divided by 2.
my_vector_2 <- my_vector/2 # Access individual elements of a vector with indices
my_vector_2
# Create a vector named my_words. It should have 7 character elements.
my_words <- c("swan", "goose", "mallard", "blue_tit", "philomelos", "sparrow", "gull")
# Combine my_vector and my_words into a data frame.
df <- data.frame(my_vector, my_words)
df
# Show the structure of the data frame.
str(df)
library(tidyverse)
# Use the head() function to print the first 3 rows of your data frame.
head(df) #How to print the first 3 rows instead of 5?
# Create a new variable to the data frame which has the values of my_vector_2 (remember to save the new variable to the data frame object).
pair <- c(my_vector_2)
pair
df2 <- data.frame(pair)
df2
# Use filter() to print rows of your data frame greater than the median value of my_vector.
df2 %>%
filter(df2 > mean(my_vector))
# Use filter() to print rows of your data frame greater than the median value of my_vector.
df2 %>%
filter(pair > mean(my_vector))
# Use filter() to print rows of your data frame greater than the median value of my_vector.
df2 %>%
filter(pair > mean(my_vector))
# Use filter() to print rows of your data frame greater than the median value of my_vector.
df2 %>%
filter(df2 > mean(my_vector))
df2 %>%
filter(pair > mean(my_vector))
# Use filter() to print rows of your data frame greater than the median value of my_vector.
df2 %>% filter(pair > mean(my_vector))
df2
df
df2
df2 <- data.frame(pair)
df2
df2 <- data.frame(df,pair)
df2
# Use filter() to print rows of your data frame greater than the median value of my_vector.
df2 %>% filter(pair > mean(my_vector))
# Use filter() to print rows of your data frame greater than the median value of my_vector.
mean(my_vector)
my_vector <- c(6, 14, 18, 2, 2, 16, 16)
# Print your vector
my_vector
# Calculate the minimum, maximum, and median values of your vector
summary(my_vector)
# Print "The median value is XX"
mean_exercise1 <- mean(my_vector) # Output from functions can be saved to objects
paste("The median value is ", mean_exercise1) # Use the paste() function to print the object with text
my_vector_2 <- my_vector/2 # Access individual elements of a vector with indices
my_vector_2
# Create a vector named my_words. It should have 7 character elements.
my_words <- c("swan", "goose", "mallard", "blue_tit", "philomelos", "sparrow", "gull")
# Combine my_vector and my_words into a data frame.
df <- data.frame(my_vector, my_words)
df
# Show the structure of the data frame.
str(df)
library(tidyverse)
# Use the head() function to print the first 3 rows of your data frame.
head(df) #How to print the first 3 rows instead of 5?
# Create a new variable to the data frame which has the values of my_vector_2 (remember to save the new variable to the data frame object).
pair <- c(my_vector_2)
pair
df2 <- data.frame(df,pair)
df2
# Use filter() to print rows of your data frame greater than the median value of my_vector.
df2 %>% filter(pair > mean(my_vector))
# Use filter() to print rows of your data frame greater than the median value of my_vector.
df2 %>% filter(pair > mean(my_vector))
df2
# Week 1
yufan_yin_week1: 16.9. - 21.9.2020
Also see in the page to my course diary: <https://yufanyin.github.io/datavis-R/>
(It is the habit because of another course.)
## Exercise 1
```{r}
# Create a vector named my_vector. It should have 7 numeric elements.
my_vector <- c(20, 14, 18, 4, 2, 16, 16)
# Print your vector
my_vector
# Calculate the minimum, maximum, and median values of your vector
summary(my_vector)
# Print "The median value is XX"
mean_exercise1 <- mean(my_vector) # Output from functions can be saved to objects
paste("The median value is ", mean_exercise1) # Use the paste() function to print the object with text
```
## Exercise 2
```{r}
# Create another vector named my_vector_2. It should have the elements of my_vector divided by 2.
my_vector_2 <- my_vector/2 # Access individual elements of a vector with indices
my_vector_2
# Create a vector named my_words. It should have 7 character elements.
my_words <- c("swan", "goose", "mallard", "blue_tit", "philomelos", "sparrow", "gull")
# Combine my_vector and my_words into a data frame.
df <- data.frame(my_vector, my_words)
df
# Show the structure of the data frame.
str(df)
```
## Exercise 3
```{r}
library(tidyverse)
# Use the head() function to print the first 3 rows of your data frame.
head(df) #How to print the first 3 rows instead of 5?
# Create a new variable to the data frame which has the values of my_vector_2 (remember to save the new variable to the data frame object).
pair <- c(my_vector_2)
pair
df2 <- data.frame(df,pair)
df2
# Use filter() to print rows of your data frame greater than the median value of my_vector.
df2 %>% filter(pair > mean(my_vector))
```
# Use filter() to print rows of your data frame greater than the median value of my_vector.
df2 %>% filter(pair > mean(my_vector))
# Week 1
yufan_yin_week1: 16.9. - 21.9.2020
Also see in the page to my course diary: <https://yufanyin.github.io/datavis-R/>
(It is the habit because of another course.)
## Exercise 1
```{r}
# Create a vector named my_vector. It should have 7 numeric elements.
my_vector <- c(20, 14, 18, 14, 2, 16, 16)
# Print your vector
my_vector
# Calculate the minimum, maximum, and median values of your vector
summary(my_vector)
# Print "The median value is XX"
mean_exercise1 <- mean(my_vector) # Output from functions can be saved to objects
paste("The median value is ", mean_exercise1) # Use the paste() function to print the object with text
```
## Exercise 2
```{r}
# Create another vector named my_vector_2. It should have the elements of my_vector divided by 2.
my_vector_2 <- my_vector/2 # Access individual elements of a vector with indices
my_vector_2
# Create a vector named my_words. It should have 7 character elements.
my_words <- c("swan", "goose", "mallard", "blue_tit", "philomelos", "sparrow", "gull")
# Combine my_vector and my_words into a data frame.
df <- data.frame(my_vector, my_words)
df
# Show the structure of the data frame.
str(df)
```
## Exercise 3
```{r}
library(tidyverse)
# Use the head() function to print the first 3 rows of your data frame.
head(df) #How to print the first 3 rows instead of 5?
# Create a new variable to the data frame which has the values of my_vector_2 (remember to save the new variable to the data frame object).
pair <- c(my_vector_2)
pair
df2 <- data.frame(df,pair)
df2
# Use filter() to print rows of your data frame greater than the median value of my_vector.
df2 %>% filter(pair > mean(my_vector))
```
my_vector <- c(20, 14, 18, 14, 2, 16, 16)
# Print your vector
my_vector
# Calculate the minimum, maximum, and median values of your vector
summary(my_vector)
# Print "The median value is XX"
mean_exercise1 <- mean(my_vector) # Output from functions can be saved to objects
paste("The median value is ", mean_exercise1) # Use the paste() function to print the object with text
# Create another vector named my_vector_2. It should have the elements of my_vector divided by 2.
my_vector_2 <- my_vector/2 # Access individual elements of a vector with indices
my_vector_2
# Create a vector named my_words. It should have 7 character elements.
my_words <- c("swan", "goose", "mallard", "blue_tit", "philomelos", "sparrow", "gull")
# Combine my_vector and my_words into a data frame.
df <- data.frame(my_vector, my_words)
df
# Show the structure of the data frame.
str(df)
library(tidyverse)
# Use the head() function to print the first 3 rows of your data frame.
head(df) #How to print the first 3 rows instead of 5?
# Create a new variable to the data frame which has the values of my_vector_2 (remember to save the new variable to the data frame object).
pair <- c(my_vector_2)
pair
df2 <- data.frame(df,pair)
df2
```{r}
# Create a vector named my_vector. It should have 7 numeric elements.
my_vector <- c(20, 14, 18, 14, 10, 16, 16)
# Print your vector
my_vector
# Calculate the minimum, maximum, and median values of your vector
summary(my_vector)
# Print "The median value is XX"
mean_exercise1 <- mean(my_vector) # Output from functions can be saved to objects
paste("The median value is ", mean_exercise1) # Use the paste() function to print the object with text
```
## Exercise 2
```{r}
# Create another vector named my_vector_2. It should have the elements of my_vector divided by 2.
my_vector_2 <- my_vector/2 # Access individual elements of a vector with indices
my_vector_2
# Create a vector named my_words. It should have 7 character elements.
my_words <- c("swan", "goose", "mallard", "blue_tit", "philomelos", "sparrow", "gull")
# Combine my_vector and my_words into a data frame.
df <- data.frame(my_vector, my_words)
df
# Show the structure of the data frame.
str(df)
```
## Exercise 3
```{r}
library(tidyverse)
# Use the head() function to print the first 3 rows of your data frame.
head(df) #How to print the first 3 rows instead of 5?
# Create a new variable to the data frame which has the values of my_vector_2 (remember to save the new variable to the data frame object).
pair <- c(my_vector_2)
pair
df2 <- data.frame(df,pair)
df2
pair
# Use filter() to print rows of your data frame greater than the median value of my_vector.
df2 %>% filter(pair > mean(my_vector))
df2
# Use filter() to print rows of your data frame greater than the median value of my_vector.
df2 %>% filter(df2 > mean(my_vector))
df2
# Use filter() to print rows of your data frame greater than the median value of my_vector.
df2 %>% filter(df2 > mean(my_vector))
